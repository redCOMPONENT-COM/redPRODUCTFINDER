<?xml version="1.0" encoding="UTF-8"?>
<!-- ==================================================================  -->
<!-- redITEM packager                                                    -->
<!-- This PHING build file generates the redITEM extension package       -->
<!-- To use in your environment do the following steps:                  -->
<!--    Change the following variables in build.properties file          -->
<!--            (copy variables from build.properties.dist )             -->
<!--    - change the version in variable comp.version                    -->
<!--    - change the package folder path in variable package.dir         -->
<!--    - execute this PHING build file                                  -->
<!-- ==================================================================  -->
<project name="com_redproductfinder" default="pack">
	<!-- ============================================  -->
	<!-- Create packages folder                        -->
	<!-- ============================================  -->
	<target name="prepare">
		<if>
			<not>
				<isset property="package.dir" />
			</not>
			<then>
				<fail msg="package.dir not specified, specify package.dir in build.properties file" />
			</then>
		</if>

	    <!-- Folder where the redSHOP repository is located  -->
	    <property
	            name="extpath"
	            value="."
	            override="true"/>

	    <xmlproperty file="${extpath}/${extension}.xml" prefix="extensionDetails" keepRoot="false" />

		<property
				name="version"
				value="${extensionDetails.version}"
				override="true"/>

		<!-- Temp dir to create packages -->
		<property
				name="tmpdir"
				value=".tmp"
				override="true"/>

		<!-- Check if the temp folder exists. If not, create it -->
		<if>
			<available file="${tmpdir}" type="dir"/>
			<then>
				<echo msg="Removing old ${tmpdir}"/>
				<delete dir="${tmpdir}"/>
			</then>
		</if>
		<echo msg="Making directory to store the temporary packages at ${tmpdir}"/>
		<mkdir dir="${tmpdir}"/>
	</target>

	<target name="build" depends="prepare, copyredcore">

		<echo msg="Copying INSTALLER files to build directory..."/>
		<copy todir="${tmpdir}/${extension}">
			<fileset dir="${project.basedir}/">
				<include name="LICENSE.txt"/>
				<include name="redproductfinder.xml"/>
				<include name="component/install.redproductfinder.php"/>
			</fileset>
		</copy>

		<echo msg="Copying COMPONENT folder to build directory..."/>
		<copy todir="${tmpdir}/${extension}/component">
			<fileset dir="${project.basedir}/component">
				<include name="**"/>
				<exclude name=".*"/>
			</fileset>
		</copy>

		<echo msg="Copying MEDIA folder to build directory..."/>
		<copy todir="${tmpdir}/${extension}/media/com_redproductfinder">
			<fileset dir="${project.basedir}/media">
				<include name="**"/>
				<exclude name=".*"/>
			</fileset>
		</copy>
	</target>

    <target name="copyredcore">
        <phing phingfile="${project.basedir}/redCORE/redcore_copy_mandatory.xml"
               target="copyframework"
               haltonfailure="true">
            <property name="redcoretargetdir" value="${tmpdir}/${extension}/redCORE" />
            <property name="redcorepath" value="${project.basedir}/redCORE" />
        </phing>
    </target>

	<target name="compress">
		<echo msg="Creating ZIP archive..."/>

		<!-- Extension ZIP packaging -->
		<if>
			<available file="${package.dir}/${extension}-v${version}.zip" property="test_zip_exists" value="Yes"/>
			<then>
				<echo msg="Removing old ZIP"/>
				<delete file="${package.dir}/${extension}-v${version}.zip" />
			</then>
		</if>

		<if>
			<available file="${tmpdir}/${extension}-v${version}.zip" property="test_zip_exists" value="Yes"/>
			<then>
				<delete file="${tmpdir}/${extension}-v${version}.zip" />
			</then>
		</if>

		<zip destfile="${tmpdir}/${extension}-v${version}.zip">
			<fileset dir="${tmpdir}/${extension}">
				<include name="**"/>
				<exclude name=".*"/>
			</fileset>
		</zip>

		<copy file="${tmpdir}/${extension}-v${version}.zip" tofile="${package.dir}/${extension}-v${version}.zip" />

		<echo msg="Files copied and compressed in build directory OK!"/>
	</target>

	<target name="clean-tmp">
		<delete dir="${tmpdir}"/>
	</target>

	<target name="compress-clean" depends="compress, clean-tmp">
		<!-- needed for external cleaning and compressing -->
	</target>

	<target name="dist" depends="build, compress-clean">
		<echo msg="Build successful!"/>
	</target>

	<target name="pack">
		<!-- Do initialization stuff -->
		<if>
			<not>
				<available file="build.properties" type="file" />
			</not>
			<then>
				<fail msg="File not found: build.properties" />
			</then>
		</if>

		<property file="build.properties" override="true"/>

		<property
				name="extension"
				value="${comp.name}"
				override="true"/>

		<phingcall target="dist" />
	</target>

	<target name="autopack">
		<property
				name="package.dir"
				value=".dist"
				override="true"/>

		<property
				name="extension"
				value="reditem"
				override="true"/>

		<if>
			<available file="${package.dir}" type="dir"/>
			<then>
				<echo msg="Removing old autopack folder"/>
				<delete dir="${package.dir}"/>
			</then>
		</if>

		<phingcall target="dist" />
	</target>
</project>
